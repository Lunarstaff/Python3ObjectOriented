-在Python中如何创建类并实例化对象
-如何给Python对象添加属性和行为
-如何把类组织成包和模块
-如何建议别人不要错误使用我们的数据

一个最简单的类：

# 一个最简单的类
class MyFirstClass:
    pass

以关键字class 开头。之后跟着一个名字用来标识这个类，并且以冒号结尾。
类的命名必须符合标准的Python变更命名规则（必须以字母或者下画线开头，
名字中只能包含字母、下画线或者数字）。
同时，Python代码风格指南建议类的名字应该使用驼峰式记法
（以大写字母开头，并且随后紧跟的任意一个单词都要以大写字母开头）

在类的定义中，我们不必要做任何特殊的操作。我们可以通过点记法给一个实例化的对象赋予任意属性：
注：MyFirstClass.py
点记法： <object>.<attribute> = <value>

为Point 类的增加一些行为：
    增加reset 的方法，这个方法用来把点移至原点(0, 0)
注：MyFirstClass_v1.1.py
方法（method）和定义一个函数（functioin）相同，以关键字def开头,紧跟一个空格和方法名，方法名后面
紧跟一对小括号，括号内包含参数列表。

    方法和普通函数有一点不同，就是所有方法都有一个必需的参数，这个参数通常被称为self，
    一个方法中的self参数，是对调用这个方法的对象的一个引用。
    我们可以和其他对象一样访问这个对象的属性和方法

除了可以直接调用一个具体对象的方法以外，还可以在类中调用这个函数，并且明确地把这个对象作为self参数
传给对象：
# 实例化一个对象pt
pt = Point()
# 给对象pt设定初始值
pt.x = 3
pt.y = 4
# 检查1
print(pt.x, pt.y)
# 在类中调用这个函数，并且明确地把这个对象作为self参数传给对象
Point.reset(pt)
# 检查2
print(pt.x, pt.y)

# 输出为：
# 3 4
# 0 0

如何给方法传递多个参数呢？
为Point类增加一个新的方法，允许我们把点移动到任意位置，而不是只移动到原点。
为Point类增加另外一个方法，接收另一个Point对象作为输入，然后返回这两个对象之间的距离。
注：MyFirstClass_v1.2.py
assert 函数是一个简单的测试工具，如果assert后面的语句是False（0、空或者None）的话，这个程序
就会异常退出。

对象的初始化：
    大部分面向对象编程语言都有一个叫构造函数的特殊方法，当它被创建的时候会创建和初始化对象。
    Python有一点不同，Python有一个机构函数和一个初始化函数，正常情况下，构造函数很少能用到，除非你
    想做一些特别另类的操作。

    初始化方法，有一个特殊的名字 __init__ ，其他的与普通方法相同。

为Point类添加初始化函数，要求实例化Point对象时提供x 和y的坐标值。
注：MyFirstClass_v1.3.py

# 构造 一个P
point = Point(3, 5)
print(point.x, point.y)

# 输出为：
# 3 5

Python的docstring提供了这种对文档方式的支持。在每个类、函数、方法的开头，紧接着它们的定义可
以有一行Python的标准字符串（用单引号、双引号标注）或多行字符串（三单引号、三双引号标注）

为Point类添加docstring
注：MyFirstClass_v1.4.py

在cmd命令提示符窗口输入python -i MyFirstClass_v1.4.py ，然后在Python提示符窗口输入help(Point)
打印出Point类的docstring如下：

C:\E-Data-File\腾讯课堂\Python入门\Python3ObjectOriented\Book_chapters\Chapter_2\testcode>python -i MyFirstClass_v1.4.py

>>> help(Point)
Help on class Point in module __main__:

class Point(builtins.object)
 |  Point类
 |
 |  Methods defined here:
 |
 |  __init__(self, x=0, y=0)
 |      初始化方法：
 |          初始化一个新的Point类型对象的位置，如果没有给初始值，新的点类型对象默认位置为(0, 0)
 |      :param x:
 |      :param y:
 |
 |  calculate_distance(self, other_point)
 |      计算两个点的直线距离，返回值为浮点数
 |      distance = sqrt((x1 - x2)**2 - (y1 - y2)**2)
 |      :param other_point:
 |      :return:
 |
 |  move(self, x, y)
 |      移动点对象到一个新的位置(x, y)
 |      :param x:
 |      :param y:
 |      :return:
 |
 |  reset(self)
 |      重置点位置，把点位置设置为(0, 0)
 |      :return:
 |
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |
 |  __dict__
 |      dictionary for instance variables (if defined)
 |
 |  __weakref__
 |      list of weak references to the object (if defined)


组织模块
不能把模块放到模块里面，就像一个文件只能持有一个文件一样，毕竟模块也只不过是Python文件。
文件可以放到文件夹里，模块也是。一个包（package）就是放到一个文件夹里的模块集合。
    包的名字就是文件夹的名字，我们只需要告诉Python这个文件夹是一个包，并且把一个名为__init__.py的
    文件（通常是空的）放到这个文件夹里。如果没有这个文件，就不能从这个文件夹里导入那些模块。
注：C:\E-Data-File\腾讯课堂\Python入门\Python3ObjectOriented\Book_chapters\Chapter_2\image
目录下的 “组织模块*”几个图片。

    绝对导入
    相对导入

访问控制
    对象里的某些属性和方法会被标记为“私有的（protected）”，意思是只有这个对象可以访问它们。
    另外一些会被标记为“受保护的（protected）”，意思是只有这个类和它的子类可以访问
    剩下的会被标记为“公共的（public）”，意思是允许任何其他对象访问他们。

    Python没有这些，相反，它提供了一个不强制的指南和最佳实践。在技术层面上，一个类里的所有方法和
    属性都是公共可访问的。如果我们想建议某个方法不应该能被公共访问，我们可以通过在docstring里放
    一个提示来表明是否这个方法只是内部使用的（解释面向公共的API如何工作会更好！）

名称改编：强烈建议外部对象不能访问某个属性或者方法，就给它添加一个双下画线的前缀。意思就是外部对象如果
真的想访问还是仍然可以调用这个方法的，但是你需要做额外的工作，并且它是一个很强的指示器，指示你想到你
的属性应该保持私有性。



#案例学习
注：./cmd-notebook/
构建一个简单的命令行笔记本应用（command-lin notebook application）。
要点：不会使用到多个包，会用到类、函数、方法和docstring
分析：
    1、笔记（note）是存在笔记本（notebook）里的短的文本备忘录（memos）。
    2、每一条笔记（note）都应该记录下它被创建的时间，并且为了查询方便，可以添加标签（tag）
    3、笔记（note）应该可以修改，也可以被搜索
    4、所有操作都通过命令行实现

note对象有memo本身、tags和creation_date这几个属性。每一个note也需要一个唯一的整数ID
note有一个方法可以修改它的内容，另一个方法可以修改标签
note有一个match方法，输入一个字符串，返回是否有一条note与输入的字符串匹配。
notebook对象会有一个notes列表做为它的属性，有一个能返回过滤后的notes列表的search方法

类图：

NoteBook
    +notes; list
    +search(filter: str): list
    +new_note(memo, tags='')
    +modify_memo(note_id, memo)
    +modify_tags(mote_id, tags)
---------------------------------------
                   ^
                   ||
                   |*
                   |
---------------------------------------
Note
    +memo
    +creation_date
    +tags
    +match(search_filter: str) boolean

包结构：
C:\E-Data-File\腾讯课堂\Python入门\Python3ObjectOriented\Book_chapters\Chapter_2\cmd-notebook\command_option.py

./cmd-notebook/
    notebook.py
    menu.py
    command_option.py

测试下notebook.py，需要把notebook.py文件放到Python解释器的目录下（python.exe文件同目录下）
注：notebook.py

测试一：
>>> from notebook import Note
>>> n1 = Note("first note")
>>> n2 = Note("second note")
>>> n1.id
1
>>> n2.id
2
>>> n1.match(note)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'note' is not defined
>>> n1.match("note")
True
>>> n2.match("sec")
True
>>>

测试二：
>>> from notebook import Note, Notebook
>>> n = Notebook()
>>> n.new_note("first note")
>>> n.new_note("2nd note")
>>> n.notes
[<notebook.Note object at 0x000002669813F2B0>, <notebook.Note object at 0x000002669813F320>]
>>> n.notes[0].id
1
>>> n.notes[1].id
2
>>> n.notes[0].memo
'first note'
>>> n.search("note")
[<notebook.Note object at 0x000002669813F2B0>, <notebook.Note object at 0x000002669813F320>]
>>> n.search("2")
[<notebook.Note object at 0x000002669813F320>]
>>> n.modify_memo(1,"1st note")
>>> n.notes[0].memo
'1st note'
