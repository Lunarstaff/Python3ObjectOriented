继承
    继承允许我们在两个或者更多的类之间创建一种“是一个”的关系，这种关系把共同的细节抽象到一个超类里，
   特有的细节存于子类里。

   - 基本继承
   - 从内置的类继承
   - 多重继承
   - 多态和动态类型

================================================================================

基本继承
    从技术上讲，每一个我们创建的类都使用了继承。所有的Python类都是一个叫作object的特殊类的子类。
    如果我们不具体指明我们的类从其他类继承，那这个类自动从object类继承过来。

    超类
        超类，也叫父类，是一个被继承的类。
    子类
        子类，是一个从超类继承过来的类。
    一个子类来源于父类，或者这个子类扩展了父类

注：MySubClassv1.0.py
    # 创建一个新的叫Supplier的类，和Contact类一样，但是他有额外的order(订单)方法

    测试一：
    把MySubClass文件复制到Python解释器目录下（与python.exe同目录下）
    >>> from MySubClass import Contact, Supplier
    >>> c = Contact("ContaceName", "Contact@teller.com")
    >>> s = Supplier("SupplierName", "Supplier@teller.com")
    >>> print(c.name, c.email, s.name, s.email)
    ContaceName Contact@teller.com SupplierName Supplier@teller.com
    >>> c.all_contacts
    [<MySubClass.Contact object at 0x00000216057787F0>, <MySubClass.Supplier object at 0x0000021605778748>]
    >>> c.order("test-order")
    Traceback (most recent call last):
      File "<stdin>", line 1, in <module>
    AttributeError: 'Contact' object has no attribute 'order'
    >>> s.order("test-order")
    If this were a real system we would send test-order order to SupplierName

扩展内置类：
    给列表类扩展，添加一个方法用于搜索。
    注：MySubClassv2.0.py

    测试二：
    >>> from MySubClass import Contact, ContactList, Supplier
    >>> c1 = Contact("John A", "Johna@teller.com")
    >>> c2 = Contact("John B", "Johnb@teller.com")
    >>> c3 = Contact("John C", "Johnc@teller.com")
    >>> c4 = Contact("Jenna D", "Jennad@teller.com")
    >>> [c.name for c in Contact.all_contacts.search("John")]